<?xml version="1.0" encoding="UTF-8"?><Graph author="azazdesai" created="Thu Mar 14 11:49:26 IST 2013" guiVersion="3.3.0.M2" id="1363245747898" licenseCode="Unlicensed" licenseType="Unknown" modified="Thu Mar 14 11:49:26 IST 2013" modifiedBy="azazdesai" name="pojo 2 csv" preview-arguments="generatedCode:&quot;Sample Generated Code&quot;" preview-file="${Project_Home}/src/main/resources/input.groovy" revision="1.0" showComponentDetails="false">
<Global>
<Metadata __sourcePath="{}/object" _dataStructure="OBJECT" _id="__id" _type="Input" id="Metadata0">
<Record fieldDelimiter="|" name="InputPojo" recordDelimiter="&#10;" type="delimited">
<Field __artificialType="_id" __systemManaged="true" name="__id" type="string"/>
<Field __sourcePath="{}/object/creationTimestamp" label="creationTimestamp" name="creationTimestamp" type="long"/>
<Field __sourcePath="{}/object/description" label="description" name="description" type="string"/>
<Field __sourcePath="{}/object/id" label="id" name="id" type="integer"/>
<Field __sourcePath="{}/object/value1" label="value1" name="value1" type="string"/>
<Field __sourcePath="{}/object/value2" label="value2" name="value2" type="string"/>
</Record>
</Metadata>
<Metadata _dataStructure="SINGLE_DIMENSIONAL_COLLECTION" _type="Output" id="Metadata1">
<Record fieldDelimiter="," name="sample_output" recordDelimiter="\n" type="delimited">
<Field label="uniqueId" name="uniqueId" type="string"/>
<Field label="description" name="description" type="string"/>
<Field label="name" name="name" type="string"/>
<Field label="code" name="code" type="string"/>
<Field eofAsDelimiter="true" label="timestamp" name="timestamp" type="string"/>
</Record>
</Metadata>
<Dictionary>
<Entry id="DictionaryEntry0" input="true" name="inputPayload" output="false" type="object"/>
<Entry id="DictionaryEntry1" input="false" name="outputPayload" output="true" type="object"/>
<Entry id="DictionaryEntry2" input="true" name="generatedCode" output="false" type="string"/>
</Dictionary>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="dict:inputPayload" guiHeight="0" guiName="Pojo READER" guiWidth="0" guiX="20" guiY="20" id="BEAN_READER0" type="BEAN_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Context outPort="0" sequenceField="__id" xpath=".">
  <Mapping cloverField="creationTimestamp" trim="true" xpath="creationTimestamp"/>
  <Mapping cloverField="description" trim="true" xpath="description"/>
  <Mapping cloverField="id" trim="true" xpath="id"/>
  <Mapping cloverField="value1" trim="true" xpath="value1"/>
  <Mapping cloverField="value2" trim="true" xpath="value2"/>
</Context>
]]></attr>
<attr name="_data_format"><![CDATA[JAVA]]></attr>
<attr name="schema"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><schema-object>
  <typed-object-ref type-ref="org.mulesoft.dmia.example.InputPojo"/>
  <typed-object type="java.lang.Long"/>
  <typed-object type="java.lang.Integer"/>
  <typed-object type="java.lang.String"/>
  <typed-object type="org.mulesoft.dmia.example.InputPojo">
    <typed-object-ref name="creationTimestamp" type-ref="java.lang.Long"/>
    <typed-object-ref name="description" type-ref="java.lang.String"/>
    <typed-object-ref name="id" type-ref="java.lang.Integer"/>
    <typed-object-ref name="value1" type-ref="java.lang.String"/>
    <typed-object-ref name="value2" type-ref="java.lang.String"/>
  </typed-object>
</schema-object>
]]></attr>
</Node>
<Node enabled="enabled" fileURL="dict:outputPayload" guiHeight="0" guiName="CSV WRITER" guiWidth="0" guiX="680" guiY="20" id="DATA_WRITER0" quotedStrings="true" type="DATA_WRITER">
<attr name="_data_format"><![CDATA[CSV]]></attr>
</Node>
<Node enabled="enabled" guiHeight="0" guiName="object_to_sample_output" guiWidth="0" guiX="240" guiY="20" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.description = $in.0.description;
	

		return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="true" fromNode="BEAN_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="REFORMAT0:0"/>
<Edge debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
